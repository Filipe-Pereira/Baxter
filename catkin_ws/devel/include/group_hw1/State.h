// Generated by gencpp from file group_hw1/State.msg
// DO NOT EDIT!


#ifndef GROUP_HW1_MESSAGE_STATE_H
#define GROUP_HW1_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace group_hw1
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : blocks()
    , gripper_open(false)  {
    }
  State_(const ContainerAllocator& _alloc)
    : blocks(_alloc)
    , gripper_open(false)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _blocks_type;
  _blocks_type blocks;

   typedef uint8_t _gripper_open_type;
  _gripper_open_type gripper_open;




  typedef boost::shared_ptr< ::group_hw1::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::group_hw1::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::group_hw1::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::group_hw1::State > StatePtr;
typedef boost::shared_ptr< ::group_hw1::State const> StateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::group_hw1::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::group_hw1::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace group_hw1

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'group_hw1': ['/home/sanabria/ros_ws/src/group_hw1/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::group_hw1::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::group_hw1::State_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::group_hw1::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::group_hw1::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::group_hw1::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::group_hw1::State_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::group_hw1::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "488f87ce33511cba53dc04937055ec07";
  }

  static const char* value(const ::group_hw1::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x488f87ce33511cbaULL;
  static const uint64_t static_value2 = 0x53dc04937055ec07ULL;
};

template<class ContainerAllocator>
struct DataType< ::group_hw1::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "group_hw1/State";
  }

  static const char* value(const ::group_hw1::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::group_hw1::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string blocks\n\
bool gripper_open\n\
";
  }

  static const char* value(const ::group_hw1::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::group_hw1::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.blocks);
      stream.next(m.gripper_open);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::group_hw1::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::group_hw1::State_<ContainerAllocator>& v)
  {
    s << indent << "blocks: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.blocks);
    s << indent << "gripper_open: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gripper_open);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GROUP_HW1_MESSAGE_STATE_H
